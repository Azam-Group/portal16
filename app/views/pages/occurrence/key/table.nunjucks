<div class="container-fluid">
    {#<div>#}
        {#<div class="multiToggle">#}
            {#<div type="button" aria-label="All" class="isActive" focus="0"#}
                 {#ng-click="occurrence.table.filter = undefined"#}
                 {#ng-class="{isActive: occurrence.table.filter == undefined}">All</div>#}
            {#<div type="button" aria-label="Event"#}
                 {#ng-repeat="category in ['Record','Occurrence','Taxon','Location','Dataset','Identification','Event','Crawling']"#}
                 {#ng-click="occurrence.table.filter = category"#}
                 {#ng-class="{isActive: occurrence.table.filter == category}">#}
                {#{{ category }}#}
            {#</div>#}
        {#</div>#}
    {#</div>#}
    <div class="small pull-right">
        <a href="{$ 'http://www.gbif.org/occurrence/' + occurrence.record.key + '/fragment' $}">See raw fragment</a>
    </div>
    <div class="row">
        <div class="col-xs-12">
            {% for group in occurrence.terms.usedGroups %}
                <h4 class="h5">{$ group $}</h4>
                <div class="card card-table">
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Term</th>
                            <th>Interpreted</th>
                            <th>Original</th>
                            <th>Issues</th>
                        </tr>
                        </thead>
                        <tbody>
                        {#

                        list with used groups. > list of used terms with both keys. seperate list of simple field and corresponding list of issue types

                        To get the list of used terms.
                        list of all terms
                        iterate and ask verbatim and interpreted if they have content
                        if yes then add term to group.

                        list of field->issue
                        take list of issues
                        create map issueTypeKey -> issueSeverity + fields
                        create map simpleFieldName -> list of issues


                        * given list of issues get fields with issues
                        transform to map of fields with their issues {fields} -> [ {issues} ]
                        that would be easy if
                        list of issues AND issues to fields array
                        go through issues. for each issue get influenced fields. add to map of fields with the issue in case (we have the issueName -> issueObj)

                        #}
                            {% for term in occurrence.terms.groups[group] %}
                                <tr ng-if="occurrence.isVisibleInTable('{$ term.group $}')">
                                    <td>
                                        {$ term.simpleName $}
                                    </td>
                                    <td>
                                        {$ occurrence.record[term.simpleName] $}
                                    </td>
                                    <td>
                                        {$ occurrence.verbatim[term.qualifiedName] $}
                                    </td>
                                    <td>
                                        {% if occurrence.issues[term.simpleName] %}
                                            {% for issue in occurrence.issues[term.simpleName] %}
                                            <span class="badge issue-{$ issue.severity | lower $}">{$ __('interpretationRemarks.' + issue.type) $}</span>
                                            {#<span class="badge" style="background: orange">TAXON_MATCH_NONE</span>#}
                                            {#<span class="badge">TAXON_MATCH_NONE</span>#}
                                            {% endfor %}
                                        {% endif %}
                                    </td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% endfor %}
        </div>
    </div>

</div>